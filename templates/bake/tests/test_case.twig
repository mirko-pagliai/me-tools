{% set isController = type|lower == 'controller' %}
{% set isShell = type|lower == 'shell' %}
{% set isCommand = type|lower == 'command' %}
{% if isController %}
    {%- set traitName = 'IntegrationTestTrait' %}
{% elseif isShell or isCommand %}
    {%- set traitName = 'ConsoleIntegrationTestTrait' %}
{% endif %}
{%- set uses = uses|merge(["MeTools\\TestSuite\\TestCase"]) %}
{% if traitName is defined %}
    {%- set uses = uses|merge(["MeTools\\TestSuite\\#{traitName}"]) %}
{% endif %}

{%- set uses = uses|sort %}
<?php
declare(strict_types=1);

namespace {{ baseNamespace }}\Test\TestCase\{{ subNamespace }};

{% for dependency in uses %}
use {{ dependency }};
{% endfor %}

/**
 * {{ className }} Test Case
{% if isController or isCommand %}
 * @uses \{{ fullClassName }}
{% endif %}
 */
class {{ className }}Test extends TestCase
{
{% if traitName is defined %}
    use {{ traitName }};
{% if properties or fixtures or construction or methods %}

{% endif %}
{% endif %}
{% if properties %}
{% for propertyInfo in properties %}
{% if loop.index > 1 %}

{% endif %}
    /**
     * {{ propertyInfo.description }}
     * @var {{ propertyInfo.type }}
     */
    protected ${{ propertyInfo.name }}{% if propertyInfo.value is defined and propertyInfo.value %} = {{ propertyInfo.value }}{% endif %};
{% if loop.last and (fixtures or construction or methods) %}

{% endif %}
{% endfor %}
{% endif %}

{%- if fixtures %}
    /**
     * Fixtures
     * @var array<string>
     */
    protected $fixtures = {{ Bake.exportVar(fixtures|values, 1)|raw }};
{% if construction or methods %}

{% endif %}
{% endif %}

{%- if construction %}
    /**
     * setUp method
     * @return void
     */
    protected function setUp(): void
    {
        parent::setUp();
        
{% if preConstruct %}
        {{ preConstruct|raw }}
{% endif %}
{% if isCommand %}
        {{ construction|raw }}
{% else %}
        $this->{{ (subject ~ ' = ' ~ construction)|raw }}
{% endif %}
{% if postConstruct %}
        {{ postConstruct|raw }}
{% endif %}
    }
{% if not isCommand %}

    /**
     * tearDown method
     * @return void
     */
    protected function tearDown(): void
    {
        parent::tearDown();
    }
{% if methods %}

{% endif %}
{% endif %}
{% endif %}

{%- for method in methods %}
{% if loop.index > 1 %}

{% endif %}
    /**
     * Test `{{ method }}()` method
     * @return void
     * @uses \{{ fullClassName }}::{{ method }}()
     */
    public function test{{ method|camelize }}(): void
    {
        $this->markTestIncomplete('Not implemented yet');
    }
{% endfor %}
}
